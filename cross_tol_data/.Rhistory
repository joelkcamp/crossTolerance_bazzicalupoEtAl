mel_filteredTEST <- mel_raw00 %>%
select(names(mel_filtered0)[1:13], sort(names(mel_filtered0)[-(1:13)])) %>%
mutate(across(ends_with(".GT"), ~if_else(. == ".", 0)))
mel_filteredTEST <- mel_raw00 %>%
mutate(across(ends_with(".DP"), ~if_else(get(str_replace(cur_column(), "\\.DP", ".GT")) == ".", 0, .)))
View(mel_filteredTEST)
mel_filtered <- mel_raw00 %>%
select(names(mel_filtered0)[1:13], sort(names(mel_filtered0)[-(1:13)])) %>%
mutate(across(ends_with(".GT"), ~if_else(get(str_replace(cur_column(), ".GT", ".DP")) < 5, "low coverage", .))) %>%
select(-contains(".DP"))
mel_filtered <- mel_filtered0 %>%
select(names(mel_filtered0)[1:13], sort(names(mel_filtered0)[-(1:13)])) %>%
mutate(across(ends_with(".GT"), ~if_else(get(str_replace(cur_column(), ".GT", ".DP")) < 5, "low coverage", .))) %>%
select(-contains(".DP"))
View(mel_filtered)
View(mel_filtered)
mel_filtered0 <- mel_raw00 %>%
mutate(across(ends_with(".DP"), ~if_else(get(str_replace(cur_column(), "\\.DP", ".GT")) == ".", 0, .)))
mel_filtered <- mel_filtered0 %>%
select(names(mel_filtered0)[1:13], sort(names(mel_filtered0)[-(1:13)])) %>%
mutate(across(ends_with(".GT"), ~if_else(get(str_replace(cur_column(), ".GT", ".DP")) < 5, "low coverage", .))) %>%
select(-contains(".DP"))
View(mel_filtered)
colnames(mel_filtered)<-gsub("_a","",colnames(mel_filtered))
mel_chr <- mel_raw00 %>%
mutate(chr=case_when(grepl("001133", CHROM) ~"chr1",
grepl("001134", CHROM) ~"chr2",
grepl("001135", CHROM) ~"chr3",
grepl("001136", CHROM) ~"chr4",
grepl("001137", CHROM) ~"chr5",
grepl("001138", CHROM) ~"chr6",
grepl("001139", CHROM) ~"chr7",
grepl("001140", CHROM) ~"chr8",
grepl("001141", CHROM) ~"chr9",
grepl("001142", CHROM) ~"chr10",
grepl("001143", CHROM) ~"chr11",
grepl("001144", CHROM) ~"chr12",
grepl("001145", CHROM) ~"chr13",
grepl("001146", CHROM) ~"chr14",
grepl("001147", CHROM) ~"chr15",
grepl("001148", CHROM) ~"chr16",
grepl("001224", CHROM) ~"chrmt"),
.after = CHROM) %>%
select(-CHROM)
View(mel_subset)
p1 <- ggplot(mel_raw0, aes(x=QD)) + geom_density()
p2 <- ggplot(mel_raw0, aes(x=FS)) + geom_density()
p3 <- ggplot(mel_raw0, aes(x=SOR)) + geom_density()
p4 <- ggplot(mel_raw0, aes(x=MQ)) + geom_density()
p5 <- ggplot(mel_raw0, aes(x=MQRankSum)) + geom_density()
p6 <- ggplot(mel_raw0, aes(x=ReadPosRankSum)) + geom_density()
p1
p2
p3
p4
p5
p6
colnames(mel_filtered)<-gsub(".GT","",colnames(mel_filtered))
mel_chr <- mel_raw00 %>%
mutate(chr=case_when(grepl("001133", CHROM) ~"chr1",
grepl("001134", CHROM) ~"chr2",
grepl("001135", CHROM) ~"chr3",
grepl("001136", CHROM) ~"chr4",
grepl("001137", CHROM) ~"chr5",
grepl("001138", CHROM) ~"chr6",
grepl("001139", CHROM) ~"chr7",
grepl("001140", CHROM) ~"chr8",
grepl("001141", CHROM) ~"chr9",
grepl("001142", CHROM) ~"chr10",
grepl("001143", CHROM) ~"chr11",
grepl("001144", CHROM) ~"chr12",
grepl("001145", CHROM) ~"chr13",
grepl("001146", CHROM) ~"chr14",
grepl("001147", CHROM) ~"chr15",
grepl("001148", CHROM) ~"chr16",
grepl("001224", CHROM) ~"chrmt"),
.after = CHROM) %>%
select(-CHROM)
View(mel_chr)
mel_chr$chr <- as.factor(mel_chr$chr)
levels(mel_chr$chr)
mel_chr$chr <- factor(mel_chr$chr, levels=c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chrmt"))
#Checking to see if I can delete some unecessary columns. They're unecessary because they have the same value in every row.
levels(mel_chr$ID)
levels(mel_chr$FILTER)
#removing columns where values in all rows are the same
mel_chr <- mel_chr %>%
select(-ID) %>%
select(-FILTER)
cols_to_check0 <- colnames(mel_chr)
cols_to_check <- cols_to_check0[-(1:7)]
num_lines <- as.data.frame(cols_to_check) %>%
mutate(metal = case_when(grepl("Cd", cols_to_check) ~"Cd",
grepl("Co", cols_to_check) ~"Co",
grepl("Cu", cols_to_check) ~"Cu",
grepl("Mn", cols_to_check) ~"Mn",
grepl("Ni", cols_to_check) ~"Ni",
grepl("Zn", cols_to_check) ~"Zn",
grepl("OLY", cols_to_check) ~"ancestor",)) %>%
group_by(metal) %>%
count()
cols_to_check0 <- colnames(mel_chr)
cols_to_check <- cols_to_check0[-(1:11)]
num_lines <- as.data.frame(cols_to_check) %>%
mutate(metal = case_when(grepl("Cd", cols_to_check) ~"Cd",
grepl("Co", cols_to_check) ~"Co",
grepl("Cu", cols_to_check) ~"Cu",
grepl("Mn", cols_to_check) ~"Mn",
grepl("Ni", cols_to_check) ~"Ni",
grepl("Zn", cols_to_check) ~"Zn",
grepl("OLY", cols_to_check) ~"ancestor",)) %>%
group_by(metal) %>%
count()
#I need to change the chromosome name format to something easier to read
mel_chr <- mel_filtered %>%
mutate(chr=case_when(grepl("001133", CHROM) ~"chr1",
grepl("001134", CHROM) ~"chr2",
grepl("001135", CHROM) ~"chr3",
grepl("001136", CHROM) ~"chr4",
grepl("001137", CHROM) ~"chr5",
grepl("001138", CHROM) ~"chr6",
grepl("001139", CHROM) ~"chr7",
grepl("001140", CHROM) ~"chr8",
grepl("001141", CHROM) ~"chr9",
grepl("001142", CHROM) ~"chr10",
grepl("001143", CHROM) ~"chr11",
grepl("001144", CHROM) ~"chr12",
grepl("001145", CHROM) ~"chr13",
grepl("001146", CHROM) ~"chr14",
grepl("001147", CHROM) ~"chr15",
grepl("001148", CHROM) ~"chr16",
grepl("001224", CHROM) ~"chrmt"),
.after = CHROM) %>%
select(-CHROM)
#Now I have to reorder the levels so they're not in the default alphabetical order
mel_chr$chr <- as.factor(mel_chr$chr)
levels(mel_chr$chr)
mel_chr$chr <- factor(mel_chr$chr, levels=c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chrmt"))
#Checking to see if I can delete some unecessary columns. They're unecessary because they have the same value in every row.
levels(mel_chr$ID)
levels(mel_chr$FILTER)
mel_chr <- mel_chr %>%
select(-ID) %>%
select(-FILTER)
cols_to_check0 <- colnames(mel_chr)
cols_to_check <- cols_to_check0[-(1:11)]
num_lines <- as.data.frame(cols_to_check) %>%
mutate(metal = case_when(grepl("Cd", cols_to_check) ~"Cd",
grepl("Co", cols_to_check) ~"Co",
grepl("Cu", cols_to_check) ~"Cu",
grepl("Mn", cols_to_check) ~"Mn",
grepl("Ni", cols_to_check) ~"Ni",
grepl("Zn", cols_to_check) ~"Zn",
grepl("OLY", cols_to_check) ~"ancestor",)) %>%
group_by(metal) %>%
count()
mel_RMancestral <- mel_chr %>%
filter_at(vars(cols_to_check), any_vars((. != CdBM23_S1)))
View(mel_RMancestral)
mel_RMancestral <- mel_RMancestral %>%
filter(rowSums(across(everything(), ~ str_detect(., "low coverage"))) <= 50)
match_col <- "OLY077_S101"
mel_RMancestral[] <- lapply(mel_RMancestral, function(x) ifelse(x == mel_RMancestral[[match_col]], "w303", x))
mel_RMancestral$chr <- sub("^", "chr", mel_RMancestral$chr)
mel_RMancestral[] <- lapply(mel_RMancestral, function(x) gsub("chr17", "chrmt", x))
```{r}
mel_raw1 <- read.csv("full_genome_filtered2.csv")
mel_raw1 <- read.csv("snps/full_genome_filtered2.csv")
mel_raw1 <- read.csv("snps/full_genome_filtered2.csv")
View(mel_subset)
View(mel_RMancestral)
View(mel_subset_test)
View(mel_RMancestral)
mel_raw1 <- read.csv("snps/full_genome_filtered2.csv")
x = getwd()
setwd(x)
mel_raw1 <- read.csv("snps/full_genome_filtered2.csv")
library(tidyverse)
x = getwd()
setwd(x)
mel_raw1 <- read.csv("snps/full_genome_filtered2.csv")
x = getwd()
setwd(x)
mel_raw1 <- read.csv("snps/full_genome_filtered2.csv")
mel_raw1 <- read.csv("snps/full_genome_filtered2.csv")
#removing low quality sites
mel_raw1$QUAL <- as.integer(mel_raw1$QUAL)
mel_raw11 <- mel_raw1 %>%
filter(QUAL > 1000)
#removing sites with alignment issues causing multiple alternates
mel_raw11 <- mel_raw11 %>%
filter(!grepl(",", ALT))
mel_raw11[] <- lapply(mel_raw11, function(x) gsub(".:0,0", "missing:missing:0", x))
mel_filtered1 <- mel_raw11 %>%
mutate(across(c(CdBM23_S1:ZnBM47_S95), ~ map_chr(str_split(., ":"), 3), .names = "{col}_c")) %>%
mutate(across(ends_with("_c"), ~as.numeric(.))) %>%
mutate(across(c(CdBM23_S1:ZnBM47_S95), ~ map_chr(str_split(., ":"), 1), .names = "{col}_a")) %>%
select(-c(CdBM23_S1:ZnBM47_S95))
mel_filtered11 <- mel_filtered1 %>%
select(names(mel_filtered1)[1:9], sort(names(mel_filtered1)[-(1:9)])) %>%
mutate(across(ends_with("_a"), ~if_else(get(str_replace(cur_column(), "_a", "_c")) < 5, "low coverage", .))) %>%
select(-contains("_c"))
colnames(mel_filtered11)<-gsub("_a","",colnames(mel_filtered11))
```
colnames(mel_filtered11)<-gsub("_a","",colnames(mel_filtered11))
mel_filtered11 <- mel_filtered1 %>%
select(names(mel_filtered1)[1:9], sort(names(mel_filtered1)[-(1:9)])) %>%
mutate(across(ends_with("_a"), ~if_else(get(str_replace(cur_column(), "_a", "_c")) < 5, "low coverage", .))) %>%
select(-contains("_c"))
colnames(mel_filtered11)<-gsub("_a","",colnames(mel_filtered11))
#I need to change the chromosome name format to something easier to read
mel_chr1 <- mel_filtered11 %>%
mutate(chr=case_when(grepl("001133", CHROM) ~"chr1",
grepl("001134", CHROM) ~"chr2",
grepl("001135", CHROM) ~"chr3",
grepl("001136", CHROM) ~"chr4",
grepl("001137", CHROM) ~"chr5",
grepl("001138", CHROM) ~"chr6",
grepl("001139", CHROM) ~"chr7",
grepl("001140", CHROM) ~"chr8",
grepl("001141", CHROM) ~"chr9",
grepl("001142", CHROM) ~"chr10",
grepl("001143", CHROM) ~"chr11",
grepl("001144", CHROM) ~"chr12",
grepl("001145", CHROM) ~"chr13",
grepl("001146", CHROM) ~"chr14",
grepl("001147", CHROM) ~"chr15",
grepl("001148", CHROM) ~"chr16",
grepl("001224", CHROM) ~"chrmt"),
.after = CHROM) %>%
select(-CHROM)
#Now I have to reorder the levels so they're not in the default alphabetical order
mel_chr1$chr <- as.factor(mel_chr1$chr)
levels(mel_chr1$chr)
mel_chr1$chr <- factor(mel_chr1$chr, levels=c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chrmt"))
#Checking to see if I can delete some unecessary columns. They're unecessary because they have the same value in every row.
levels(mel_chr1$ID)
levels(mel_chr1$FILTER)
#removing columns where values in all rows are the same
mel_chr1 <- mel_chr1 %>%
select(-ID) %>%
select(-FILTER) %>%
select(-FORMAT)
cols_to_check1 <- colnames(mel_chr1)
cols_to_check11 <- cols_to_check1[-(1:7)]
num_lines <- as.data.frame(cols_to_check11) %>%
mutate(metal = case_when(grepl("Cd", cols_to_check11) ~"Cd",
grepl("Co", cols_to_check11) ~"Co",
grepl("Cu", cols_to_check11) ~"Cu",
grepl("Mn", cols_to_check11) ~"Mn",
grepl("Ni", cols_to_check11) ~"Ni",
grepl("Zn", cols_to_check11) ~"Zn",
grepl("OLY", cols_to_check11) ~"ancestor",)) %>%
group_by(metal) %>%
count()
```
mel_RMancestral1 <- mel_chr1 %>%
filter_at(vars(cols_to_check), any_vars((. != CdBM23_S1)))
View(mel_RMancestral1)
mel_RMancestral1 <- mel_RMancestral1 %>%
filter(rowSums(across(everything(), ~ str_detect(., "low coverage"))) <= 50)
#This is changing all data that matches the OLY077 column to "w303" so they can be marked as ancestral
match_col <- "OLY077_S101"
mel_RMancestral1[] <- lapply(mel_RMancestral1, function(x) ifelse(x == mel_RMancestral1[[match_col]], "w303", x))
mel_RMancestral1$chr <- sub("^", "chr", mel_RMancestral$chr)
mel_RMancestral1$chr <- sub("^", "chr", mel_RMancestral1$chr)
mel_RMancestral1[] <- lapply(mel_RMancestral1, function(x) gsub("chr17", "chrmt", x))
mel_subset1 <- mel_RMancestral1[apply(mel_RMancestra1l[, 10:116], 1, function(x) any(grepl("1", x))), ]
#This is removing all sites where there are no instances of 1|1
mel_subset1 <- mel_RMancestral1[apply(mel_RMancestral1[, 10:116], 1, function(x) any(grepl("1", x))), ]
mel_subset_test1 <- mel_subset1[apply(mel_subset1[, 10:116], 1, function(x) any(grepl("0", x))), ]
View(mel_RMancestral1)
View(mel_subset)
View(mel_subset1)
mel_RMancestral <- mel_chr %>%
filter_at(vars(cols_to_check), any_vars((. != CdBM23_S1)))
#This is removing all sites where there are no instances of 0
#mel_subset0 <- mel_RMancestral[apply(mel_RMancestral[, 10:116], 1, function(x) any(grepl("0", x))), ]
#UPDATE: Not sure if this filtering is necessary
#mel_RMancestral <- mel_RMancestral %>%
#  filter(rowSums(across(everything(), ~ str_detect(., "low coverage"))) <= 50)
#This is changing all data that matches the OLY077 column to "w303" so they can be marked as ancestral
match_col <- "OLY077_S101"
mel_RMancestral[] <- lapply(mel_RMancestral, function(x) ifelse(x == mel_RMancestral[[match_col]], "w303", x))
mel_RMancestral$chr <- sub("^", "chr", mel_RMancestral$chr)
mel_RMancestral[] <- lapply(mel_RMancestral, function(x) gsub("chr17", "chrmt", x))
#This is removing all sites where there are no instances of 1|1
mel_subset <- mel_RMancestral[apply(mel_RMancestral[, 12:121], 1, function(x) any(grepl("1", x))), ]
mel_subset_test <- mel_subset[apply(mel_subset[, 12:121], 1, function(x) any(grepl("0", x))), ]
View(mel_subset)
mel_subset <- mel_RMancestral[apply(mel_RMancestral[, 12:121], 1, function(x) any(grepl("1", x))), ]
View(mel_RMancestral)
View(mel_subset1)
View(mel_subset_test1)
View(mel_subset)
View(mel_RMancestral1)
mel_RMancestral <- mel_RMancestral %>%
filter(rowSums(across(everything(), ~ str_detect(., "low coverage"))) <= 50)
match_col <- "OLY077_S101"
mel_RMancestral[] <- lapply(mel_RMancestral, function(x) ifelse(x == mel_RMancestral[[match_col]], "w303", x))
View(mel_filtered11)
View(mel_raw11)
View(mel_filtered0)
View(mel_filtered0)
View(mel_filtered1)
View(mel_filtered11)
View(mel_filtered0)
View(mel_raw1)
View(mel_raw11)
View(mel_filtered1)
View(mel_filtered0)
View(mel_raw1)
View(mel_filtered1)
View(melraw0)
View(mel_raw1)
View(mel_filtered0)
View(mel_filtered1)
View(mel_filtered11)
View(mel_filtered)
mel_filteredTest <- mel_filtered %>%
rowwise() %>%
mutate(across(14:123), ~if_else(. == ALT, 1, 0))
View(mel_filteredTEST)
mel_filteredTest <- mel_filtered %>%
rowwise() %>%
mutate(across(14:123), ~if_else(. == mel_filtered$ALT, 1, 0))
mel_filteredTEST <- mel_filtered
for(i in 1:nrow(mel_filtered)) {
for(j in 14:ncol(mel_filtered)) {
if(mel_filtered$ALT == mel_filtered[i,j]) {
mel_filteredTEST[i,j] = 1
} else {
mel_filteredTEST[i,j] = 0
}
}
}
for(i in 1:nrow(mel_filtered)) {
for(j in 14:ncol(mel_filtered)) {
if(mel_filtered[i,ALT] == mel_filtered[i,j]) {
mel_filteredTEST[i,j] = 1
} else {
mel_filteredTEST[i,j] = 0
}
}
}
for(i in 1:nrow(mel_filtered)) {
for(j in 14:ncol(mel_filtered)) {
if(mel_filtered[i,5] == mel_filtered[i,j]) {
mel_filteredTEST[i,j] = 1
} else {
mel_filteredTEST[i,j] = 0
}
}
}
mel_filtered0 <- mel_raw00 %>%
mutate(across(ends_with(".DP"), ~if_else(get(str_replace(cur_column(), "\\.DP", ".GT")) == ".", 0, .)))
mel_filtered <- mel_filtered0 %>%
select(names(mel_filtered0)[1:13], sort(names(mel_filtered0)[-(1:13)])) %>%
mutate(across(ends_with(".GT"), ~if_else(get(str_replace(cur_column(), ".GT", ".DP")) < 5, "low coverage", .))) %>%
select(-contains(".DP"))
for(i in 1:nrow(mel_filtered)) {
for(j in 14:ncol(mel_filtered)) {
if(mel_filtered[i,5] == mel_filtered[i,j]) {
mel_filtered[i,j] = 1
} else {
mel_filtered[i,j] = 0
}
}
}
colnames(mel_filtered)<-gsub(".GT","",colnames(mel_filtered))
mel_chr <- mel_filtered %>%
mutate(chr=case_when(grepl("001133", CHROM) ~"chr1",
grepl("001134", CHROM) ~"chr2",
grepl("001135", CHROM) ~"chr3",
grepl("001136", CHROM) ~"chr4",
grepl("001137", CHROM) ~"chr5",
grepl("001138", CHROM) ~"chr6",
grepl("001139", CHROM) ~"chr7",
grepl("001140", CHROM) ~"chr8",
grepl("001141", CHROM) ~"chr9",
grepl("001142", CHROM) ~"chr10",
grepl("001143", CHROM) ~"chr11",
grepl("001144", CHROM) ~"chr12",
grepl("001145", CHROM) ~"chr13",
grepl("001146", CHROM) ~"chr14",
grepl("001147", CHROM) ~"chr15",
grepl("001148", CHROM) ~"chr16",
grepl("001224", CHROM) ~"chrmt"),
.after = CHROM) %>%
select(-CHROM)
#Now I have to reorder the levels so they're not in the default alphabetical order
mel_chr$chr <- as.factor(mel_chr$chr)
levels(mel_chr$chr)
mel_chr$chr <- factor(mel_chr$chr, levels=c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chrmt"))
#Checking to see if I can delete some unecessary columns. They're unecessary because they have the same value in every row.
levels(mel_chr$ID)
levels(mel_chr$FILTER)
#removing columns where values in all rows are the same
mel_chr <- mel_chr %>%
select(-ID) %>%
select(-FILTER)
cols_to_check0 <- colnames(mel_chr)
cols_to_check <- cols_to_check0[-(1:11)]
num_lines <- as.data.frame(cols_to_check) %>%
mutate(metal = case_when(grepl("Cd", cols_to_check) ~"Cd",
grepl("Co", cols_to_check) ~"Co",
grepl("Cu", cols_to_check) ~"Cu",
grepl("Mn", cols_to_check) ~"Mn",
grepl("Ni", cols_to_check) ~"Ni",
grepl("Zn", cols_to_check) ~"Zn",
grepl("OLY", cols_to_check) ~"ancestor",)) %>%
group_by(metal) %>%
count()
for(i in 1:nrow(mel_filtered)) {
for(j in 14:ncol(mel_filtered)) {
if(mel_filtered[i,5] == mel_filtered[i,j]) {
mel_filtered[i,j] = 1
} else if (mel_filtered[i,j] == "low coverage") {
} else {
mel_filtered[i,j] = 0
}
}
}
#removing sites with alignment issues causing multiple alternates
mel_raw00 <- mel_raw00 %>%
filter(!grepl(",", ALT))
#mel_raw00[] <- lapply(mel_raw00, function(x) gsub(".:0,0", "missing:missing:0", x))
mel_filtered0 <- mel_raw00 %>%
mutate(across(ends_with(".DP"), ~if_else(get(str_replace(cur_column(), "\\.DP", ".GT")) == ".", 0, .)))
mel_filtered <- mel_filtered0 %>%
select(names(mel_filtered0)[1:13], sort(names(mel_filtered0)[-(1:13)])) %>%
mutate(across(ends_with(".GT"), ~if_else(get(str_replace(cur_column(), ".GT", ".DP")) < 5, "low coverage", .))) %>%
select(-contains(".DP"))
for(i in 1:nrow(mel_filtered)) {
for(j in 14:ncol(mel_filtered)) {
if(mel_filtered[i,5] == mel_filtered[i,j]) {
mel_filtered[i,j] = 1
} else if (mel_filtered[i,j] == "low coverage") {
} else {
mel_filtered[i,j] = 0
}
}
}
colnames(mel_filtered)<-gsub(".GT","",colnames(mel_filtered))
mel_chr <- mel_filtered %>%
mutate(chr=case_when(grepl("001133", CHROM) ~"chr1",
grepl("001134", CHROM) ~"chr2",
grepl("001135", CHROM) ~"chr3",
grepl("001136", CHROM) ~"chr4",
grepl("001137", CHROM) ~"chr5",
grepl("001138", CHROM) ~"chr6",
grepl("001139", CHROM) ~"chr7",
grepl("001140", CHROM) ~"chr8",
grepl("001141", CHROM) ~"chr9",
grepl("001142", CHROM) ~"chr10",
grepl("001143", CHROM) ~"chr11",
grepl("001144", CHROM) ~"chr12",
grepl("001145", CHROM) ~"chr13",
grepl("001146", CHROM) ~"chr14",
grepl("001147", CHROM) ~"chr15",
grepl("001148", CHROM) ~"chr16",
grepl("001224", CHROM) ~"chrmt"),
.after = CHROM) %>%
select(-CHROM)
#Now I have to reorder the levels so they're not in the default alphabetical order
mel_chr$chr <- as.factor(mel_chr$chr)
levels(mel_chr$chr)
mel_chr$chr <- factor(mel_chr$chr, levels=c("chr1", "chr2", "chr3", "chr4", "chr5", "chr6", "chr7", "chr8", "chr9", "chr10", "chr11", "chr12", "chr13", "chr14", "chr15", "chr16", "chrmt"))
#Checking to see if I can delete some unecessary columns. They're unecessary because they have the same value in every row.
levels(mel_chr$ID)
levels(mel_chr$FILTER)
#removing columns where values in all rows are the same
mel_chr <- mel_chr %>%
select(-ID) %>%
select(-FILTER)
cols_to_check0 <- colnames(mel_chr)
cols_to_check <- cols_to_check0[-(1:11)]
num_lines <- as.data.frame(cols_to_check) %>%
mutate(metal = case_when(grepl("Cd", cols_to_check) ~"Cd",
grepl("Co", cols_to_check) ~"Co",
grepl("Cu", cols_to_check) ~"Cu",
grepl("Mn", cols_to_check) ~"Mn",
grepl("Ni", cols_to_check) ~"Ni",
grepl("Zn", cols_to_check) ~"Zn",
grepl("OLY", cols_to_check) ~"ancestor",)) %>%
group_by(metal) %>%
count()
#Now I will remove any sites where all lines have the same genotype
mel_RMancestral <- mel_chr %>%
filter_at(vars(cols_to_check), any_vars((. != CdBM23_S1)))
#This is removing all sites where there are no instances of 0
#mel_subset0 <- mel_RMancestral[apply(mel_RMancestral[, 10:116], 1, function(x) any(grepl("0", x))), ]
#UPDATE: Not sure if this filtering is necessary
mel_RMancestral <- mel_RMancestral %>%
filter(rowSums(across(everything(), ~ str_detect(., "low coverage"))) <= 50)
#This is changing all data that matches the OLY077 column to "w303" so they can be marked as ancestral
match_col <- "OLY077_S101"
mel_RMancestral[] <- lapply(mel_RMancestral, function(x) ifelse(x == mel_RMancestral[[match_col]], "w303", x))
mel_RMancestral$chr <- sub("^", "chr", mel_RMancestral$chr)
mel_RMancestral[] <- lapply(mel_RMancestral, function(x) gsub("chr17", "chrmt", x))
#This is removing all sites where there are no instances of 1|1
mel_subset <- mel_RMancestral[apply(mel_RMancestral[, 12:121], 1, function(x) any(grepl("1", x))), ]
mel_subset_test <- mel_subset[apply(mel_subset[, 12:121], 1, function(x) any(grepl("0", x))), ]
View(mel_subset_test)
#This is to get what sites to annotate
sites_to_check0 <- data.frame(matrix(nrow=406,ncol=1)) # AB changed to 347 from 268
sites_to_check0$key <- paste(mel_subset$chr, mel_subset$POS, sep="_")
sites_to_check <- sites_to_check0 %>%
select(key) %>%
separate(key, into = c("chr", "POS"), sep="_")
sites_to_check %>%
write.csv("snps/sites_list_subset0.csv")
